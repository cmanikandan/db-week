{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "This CloudFormation sample template for an Oracle/SQLserver to Aurora PostgreSQL/MySQL DMS lab creates a source and target DB instances in a VPC which can be used to test the database migration using AWS DMS service. You will be billed for the AWS resources used if you create a stack from this template",
	"Parameters": {
		"CreateRoleResources": {
			"Default": "true",
			"Description": "Should the template attempt to create the required Roles for DMS",
			"Type": "String",
			"AllowedValues": [
				"true",
				"false"
			]
		},
		"LaptopIPAddress": {
			"Default": "0.0.0.0/0",
			"Description": "Enter the IP Address of the machine you will accessing the Workshop From. You can use http://checkip.amazonaws.com/ to obtain it",
			"Type": "String",
			"AllowedPattern": "[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}/[0-9]{1,2}",
			"ConstraintDescription": "Must be a valid IP address with subnet specification"
		},
		"SourceDBUsername": {
			"Default": "dbmaster",
			"NoEcho": "false",
			"Description": "Enter database Admin username for the Source DB",
			"Type": "String",
			"MinLength": "4",
			"MaxLength": "16",
			"AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
			"ConstraintDescription": "must begin with a letter and contain a minimum of 4 alphanumeric characters."
		},
		"SourceDBPassword": {
			"Default": "srcadmin123",
			"NoEcho": "false",
			"Description": "Enter password for the admin user: dbmaster",
			"Type": "String",
			"MinLength": "8",
			"MaxLength": "41",
			"AllowedPattern": "[a-zA-Z0-9]*",
			"ConstraintDescription": "must contain only alphanumeric characters with minimum of 8 characters."
		},
		"SourceDBStorage": {
			"Default": "50",
			"NoEcho": "false",
			"Description": "Enter storage for Source DB in GB",
			"Type": "Number",
			"MaxValue": "6000",
			"MinValue": "50",
			"ConstraintDescription": "must contain only numberic and min 100gb less than 6000 GB."
		},
		"SourceDBInstanceType": {
			"Description": "Source RDS DB instance type",
			"Type": "String",
			"Default": "db.r4.large",
			"AllowedValues": [
				"db.m4.large",
				"db.m4.xlarge",
				"db.m4.2xlarge",
				"db.m4.4xlarge",
				"db.r4.large",
				"db.r4.xlarge",
				"db.r4.2xlarge",
				"db.r4.4xlarge"
			],
			"ConstraintDescription": "must be a valid RDS instance type."
		},
		"SourceDBEngineType": {
			"Description": "Source DB Engine Type",
			"Type": "String",
			"Default": "oracle-se2",
			"AllowedValues": [
				"oracle-se2",
				"sqlserver-se"
			],
			"ConstraintDescription": "must be a valid RDS DB Engine type."
		},
		"AuroraDBUsername": {
			"Default": "auradmin",
			"NoEcho": "false",
			"Description": "Enter database Admin username for Aurora RDS",
			"Type": "String",
			"MinLength": "4",
			"MaxLength": "16",
			"AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
			"ConstraintDescription": "must begin with a letter and contain a minimum of 4 alphanumeric characters."
		},
		"AuroraDBPassword": {
			"Default": "auroradmin123",
			"NoEcho": "false",
			"Description": "Enter password for Aurora RDS Admin user",
			"Type": "String",
			"MinLength": "8",
			"MaxLength": "41",
			"AllowedPattern": "[a-zA-Z0-9]*",
			"ConstraintDescription": "must contain only alphanumeric characters with minimum of 8 characters."
		},
		"AuroraInstanceType": {
			"Description": "Aurora DB instance type",
			"Type": "String",
			"Default": "db.r4.large",
			"AllowedValues": [
				"db.r4.large",
				"db.r4.xlarge",
				"db.r4.2xlarge",
				"db.r4.4xlarge",
				"db.r4.8xlarge"
			],
			"ConstraintDescription": "must be a valid Aurora instance types."
		},
		"AuroraEngineType": {
			"Description": "Aurora DB Engine type",
			"Type": "String",
			"Default": "aurora-postgresql",
			"AllowedValues": [
				"aurora-postgresql",
				"aurora-mysql"
			],
			"ConstraintDescription": "must be a valid Aurora instance types."
		},
		"SCTHostKeyName": {
			"Description": "Name of an existing EC2 KeyPair to enable Remote Desktop access to the instance",
			"Type": "AWS::EC2::KeyPair::KeyName",
			"ConstraintDescription": "must be the name of an existing EC2 KeyPair."
		},
		"SCTHostInstanceType": {
			"Description": "SCT EC2 instance type",
			"Type": "String",
			"Default": "c4.2xlarge",
			"AllowedValues": [
				"c4.large",
				"c4.xlarge",
				"c4.2xlarge",
				"c4.4xlarge",
				"c4.8xlarge",
				"r4.large",
				"r4.xlarge",
				"r4.2xlarge",
				"r4.4xlarge",
				"r4.8xlarge"
			],
			"ConstraintDescription": "must be a valid EC2 instance type."
		},
		"DMSInstanceType": {
			"Description": "DMS instance type",
			"Type": "String",
			"Default": "dms.c4.large",
			"AllowedValues": [
				"dms.c4.large",
				"dms.c4.xlarge",
				"dms.c4.2xlarge",
				"dms.c4.4xlarge",
				"dms.r4.large",
				"dms.r4.xlarge",
				"dms.r4.2xlarge",
				"dms.r4.4xlarge",
				"dms.r4.8xlarge"
			],
			"ConstraintDescription": "must be a valid DMS instance type."
		},
		"DMSInstanceStorage": {
			"Default": "50",
			"NoEcho": "false",
			"Description": "Enter storage for DMS Instance in GB",
			"Type": "Number",
			"MaxValue": "6000",
			"MinValue": "50",
			"ConstraintDescription": "must contain only numberic and min 100GB less than 6000 GB."
		},
		"DMSInstanceVersion": {
			"Description": "DMS Engine Version to use",
			"Type": "String",
			"Default": "2.4.4",
			"AllowedValues": [
				"2.4.5",
				"2.4.4"
			],
			"ConstraintDescription": "must be a valid DMS Engine Version."
		}
	},
	"Metadata": {
		"AWS::CloudFormation::Interface": {
			"ParameterGroups": [{
					"Label": {
						"default": "Source RDS Database Configuration"
					},
					"Parameters": [
						"SourceDBUsername",
						"SourceDBPassword",
						"SourceDBStorage",
						"SourceDBInstanceType",
						"SourceDBEngineType"
					]
				},
				{
					"Label": {
						"default": "Target Aurora Database Configuration"
					},
					"Parameters": [
						"AuroraDBUsername",
						"AuroraDBPassword",
						"AuroraInstanceType",
						"AuroraEngineType"
					]
				},
				{
					"Label": {
						"default": "Schema Conversion Tool Host Configuration"
					},
					"Parameters": [
						"SCTHostKeyName",
						"SCTHostInstanceType"
					]
				},
				{
					"Label": {
						"default": "DMS Instance Configuration"
					},
					"Parameters": [
						"DMSInstanceType",
						"DMSInstanceStorage",
						"DMSInstanceVersion"
					]
				}
			]
		}
	},
	"Mappings": {
		"SourceDBEngineMap": {
			"oracle-se2": {
				"SourceDBName": "srcdb",
				"SnapShotAccount": "343299325021",
				"SnapShotName": "reinvent-2018-dms-oracle-sample-src-snapshot",
				"SnapDatabaseVersion": "12.1.0.2.v14"
			},
			"sqlserver-se": {
				"SourceDBName": "",
				"SnapShotAccount": "900514285683",
				"SnapShotName": "dms-sample-sqlserver-se-reinvent",
				"SnapDatabaseVersion": "13.00.5216.0.v1"
			}
		},
		"AuroraMap": {
			"aurora-mysql": {
				"AuroraParameterGroupName": "default.aurora-mysql5.7",
				"EngineVersion": "5.7.12"
			},
			"aurora-postgresql": {
				"AuroraParameterGroupName": "default.aurora-postgresql9.6",
				"EngineVersion": "9.6.3"
			}
		},
		"SCTHostAMIId": {
			"us-east-1": {
				"amiid": "ami-0eff1acedac5ac3fc"
			},
			"us-east-2": {
				"amiid": "ami-047304ee81c389a97"
			},
			"us-west-1": {
				"amiid": "ami-06960a0234ae3ba63"
			},
			"us-west-2": {
				"amiid": "ami-0f8c91699765a565e"
			},
			"ap-northeast-1": {
				"amiid": "ami-03340ddd2d23abe1e"
			},
			"ap-northeast-2": {
				"amiid": "ami-04f560c71f478a87c"
			},
			"ap-northeast-3": {
				"amiid": "ami-0885c36b41d1e24d7"
			},
			"ap-southeast-1": {
				"amiid": "ami-071e21af09f3f7541"
			},
			"ap-southeast-2": {
				"amiid": "ami-0d2158f715604a6a5"
			},
			"eu-west-1": {
				"amiid": "ami-0772de2900c9ebd40"
			},
			"eu-west-2": {
				"amiid": "ami-0d288bed0eec47381"
			},
			"eu-west-3": {
				"amiid": "ami-0182792b379e3d24f"
			},
			"eu-central-1": {
				"amiid": "ami-053f4213026dc4055"
			},
			"ca-central-1": {
				"amiid": "ami-0ad575a83e7c7a531"
			},
			"sa-east-1": {
				"amiid": "ami-0a1c0430cda722967"
			},
			"ap-south-1": {
				"amiid": "ami-0e86166f04723a752"
			},
			"us-gov-west-1": {
				"amiid": "ami-00f808ec208a3ce8f"
			},
			"cn-north-1": {
				"amiid": "ami-00f808ec208a3ce8f"
			}
		}
	},
	"Conditions": {
		"CreateRoles": { 
			"Fn::Equals": [
     				{"Ref": "CreateRoleResources"},
      				"true"
   			]
		}
	},
	"Resources": {
		"DmsVpcRole": {
		  "Type": "AWS::IAM::Role",
		  "Condition" : "CreateRoles",
		  "Properties": {
		    "AssumeRolePolicyDocument": { 
			"Version": "2012-10-17",
 			  "Statement": [
 			  {
 			    "Effect": "Allow",
 			    "Principal": {
 			       "Service": "dms.amazonaws.com"
 			    },
 			  "Action": "sts:AssumeRole"
 			  }
 			]
		    },
		    "Path": "/",
		    "ManagedPolicyArns": [ "arn:aws:iam::aws:policy/service-role/AmazonDMSVPCManagementRole" ],
		    "RoleName": "dms-vpc-role"
		  }
		},
		"DmsCloudwatchLogsRole": {
		  "Type": "AWS::IAM::Role",
		  "Condition" : "CreateRoles",
		  "Properties": {
		    "AssumeRolePolicyDocument": { 
 			  "Version": "2012-10-17",
 			  "Statement": [
 			  {
 			    "Effect": "Allow",
 			    "Principal": {
 			       "Service": "dms.amazonaws.com"
 			    },
 			  "Action": "sts:AssumeRole"
 			  }
 			]
		    },
		    "Path": "/",
		    "ManagedPolicyArns": [ "arn:aws:iam::aws:policy/service-role/AmazonDMSCloudWatchLogsRole" ],
		    "RoleName": "dms-cloudwatch-logs-role"
		  }
		},
		"DmsAccessForEndpointRole": {
		  "Type": "AWS::IAM::Role",
		  "Condition" : "CreateRoles",
		  "Properties": {
		    "AssumeRolePolicyDocument": { 
			  "Version": "2012-10-17",
			  "Statement": [
			    {
			      "Sid": "1",
			      "Effect": "Allow",
			      "Principal": {
			        "Service": "dms.amazonaws.com"
			      },
			      "Action": "sts:AssumeRole"
			    },
			    {
			      "Sid": "2",
			      "Effect": "Allow",
			      "Principal": {
			        "Service": "redshift.amazonaws.com"
			      },
			      "Action": "sts:AssumeRole"
			    }
			  ]
		    },
		    "Path": "/",
		    "ManagedPolicyArns": [ "arn:aws:iam::aws:policy/service-role/AmazonDMSRedshiftS3Role" ],
		    "RoleName": "dms-access-for-endpoint"
		  }
		},
		"VPC": {
			"Type": "AWS::EC2::VPC",
			"Properties": {
				"CidrBlock": "10.0.0.0/24",
				"EnableDnsSupport": "true",
				"EnableDnsHostnames": "true",
				"Tags": [{
						"Key": "Application",
						"Value": {
							"Ref": "AWS::StackId"
						}
					},
					{
						"Key": "Name",
						"Value": {
							"Ref": "AWS::StackName"
						}
					}
				]
			}
		},
		"Subnet1": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"CidrBlock": "10.0.0.0/26",
				"MapPublicIpOnLaunch": "false",
				"AvailabilityZone": {
					"Fn::Select": [
						"0",
						{
							"Fn::GetAZs": ""
						}
					]
				},
				"Tags": [{
						"Key": "Application",
						"Value": {
							"Ref": "AWS::StackId"
						}
					},
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								" - ",
								[{
										"Ref": "AWS::StackName"
									},
									"Private Subnet 1"
								]
							]
						}
					}
				]
			},
			"DependsOn": [
				"VPC"
			]
		},
		"Subnet2": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"CidrBlock": "10.0.0.64/26",
				"MapPublicIpOnLaunch": "false",
				"AvailabilityZone": {
					"Fn::Select": [
						"1",
						{
							"Fn::GetAZs": ""
						}
					]
				},
				"Tags": [{
						"Key": "Application",
						"Value": {
							"Ref": "AWS::StackId"
						}
					},
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								" - ",
								[{
										"Ref": "AWS::StackName"
									},
									"Private Subnet 2"
								]
							]
						}
					}
				]
			},
			"DependsOn": [
				"VPC"
			]
		},
		"Subnet3": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"CidrBlock": "10.0.0.128/26",
				"MapPublicIpOnLaunch": "true",
				"AvailabilityZone": {
					"Fn::Select": [
						"0",
						{
							"Fn::GetAZs": ""
						}
					]
				},
				"Tags": [{
						"Key": "Application",
						"Value": {
							"Ref": "AWS::StackId"
						}
					},
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								" - ",
								[{
										"Ref": "AWS::StackName"
									},
									"Public Subnet 1"
								]
							]
						}
					}
				]
			},
			"DependsOn": [
				"VPC"
			]
		},
		"DBSubnetGroup": {
			"Type": "AWS::RDS::DBSubnetGroup",
			"Properties": {
				"DBSubnetGroupDescription": "Subnet available for the DMS Demo RDS DB Instance",
				"SubnetIds": [{
						"Ref": "Subnet1"
					},
					{
						"Ref": "Subnet2"
					}
				],
				"Tags": [{
					"Key": "Application",
					"Value": {
						"Ref": "AWS::StackId"
					}
				}]
			},
			"DependsOn": [
				"Subnet1",
				"Subnet2"
			]
		},
		"DMSSubnetGroup": {
			"Type": "AWS::DMS::ReplicationSubnetGroup",
			"Properties": {
				"ReplicationSubnetGroupIdentifier": {
					"Fn::Join": [
						"",
						[{
								"Ref": "AWS::StackName"
							},
							"DMSSubnetGroup"
						]
					]
				},
				"ReplicationSubnetGroupDescription": "Subnet group for the DMS workshop",
				"SubnetIds": [{
						"Ref": "Subnet1"
					},
					{
						"Ref": "Subnet2"
					}
				],
				"Tags": [{
					"Key": "Application",
					"Value": {
						"Ref": "AWS::StackId"
					}
				}]
			},
			"DependsOn": [
				"Subnet1",
				"Subnet2"
			]
		},
		"InternetGateway": {
			"Type": "AWS::EC2::InternetGateway",
			"Properties": {
				"Tags": [{
					"Key": "Application",
					"Value": {
						"Ref": "AWS::StackId"
					}
				}]
			},
			"DependsOn": [
				"VPC"
			]
		},
		"AttachGateway": {
			"Type": "AWS::EC2::VPCGatewayAttachment",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"InternetGatewayId": {
					"Ref": "InternetGateway"
				}
			}
		},
		"RouteTable": {
			"Type": "AWS::EC2::RouteTable",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"Tags": [{
						"Key": "Application",
						"Value": {
							"Ref": "AWS::StackId"
						}
					},
					{
						"Key": "Application",
						"Value": {
							"Fn::Join": [
								" - ",
								[{
										"Ref": "AWS::StackName"
									},
									"DMS Workshop GW"
								]
							]
						}
					}
				]
			},
			"DependsOn": [
				"VPC"
			]
		},
		"Route": {
			"Type": "AWS::EC2::Route",
			"Properties": {
				"RouteTableId": {
					"Ref": "RouteTable"
				},
				"DestinationCidrBlock": "0.0.0.0/0",
				"GatewayId": {
					"Ref": "InternetGateway"
				}
			},
			"DependsOn": [
				"RouteTable",
				"AttachGateway"
			]
		},
		"SubnetRouteTableAssociation1": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "Subnet1"
				},
				"RouteTableId": {
					"Ref": "RouteTable"
				}
			},
			"DependsOn": [
				"RouteTable"
			]
		},
		"SubnetRouteTableAssociation2": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "Subnet2"
				},
				"RouteTableId": {
					"Ref": "RouteTable"
				}
			},
			"DependsOn": [
				"RouteTable"
			]
		},
		"SubnetRouteTableAssociation3": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "Subnet3"
				},
				"RouteTableId": {
					"Ref": "RouteTable"
				}
			},
			"DependsOn": [
				"RouteTable"
			]
		},
		"DBSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Security group for Oracle Instance.",
				"VpcId": {
					"Ref": "VPC"
				},
				"SecurityGroupIngress": [{
						"IpProtocol": "tcp",
						"FromPort": "1521",
						"ToPort": "1521",
						"CidrIp": "10.0.0.0/24"
					},
					{
						"IpProtocol": "tcp",
						"FromPort": "1433",
						"ToPort": "1433",
						"CidrIp": "10.0.0.0/24"
					},
					{
						"IpProtocol": "tcp",
						"FromPort": "3306",
						"ToPort": "3306",
						"CidrIp": "10.0.0.0/24"
					},
					{
						"IpProtocol": "tcp",
						"FromPort": "5432",
						"ToPort": "5432",
						"CidrIp": "10.0.0.0/24"
					}
				]
			}
		},
		"SCTHostVPCSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Security group for SCT Host.",
				"VpcId": {
					"Ref": "VPC"
				},
				"SecurityGroupIngress": [{
					"IpProtocol": "tcp",
					"FromPort": "3389",
					"ToPort": "3389",
					"CidrIp": {
						"Ref": "LaptopIPAddress"
					}
				}]
			}
		},
		"SourceDBInstance": {
			"Type": "AWS::RDS::DBInstance",
			"Properties": {
				"DBInstanceIdentifier": {
					"Fn::Join": [
						"",
						[{
								"Ref": "AWS::StackName"
							},
							"-SourceDB"
						]
					]
				},
				"DBName": {
					"Fn::FindInMap": [
						"SourceDBEngineMap",
						{
							"Ref": "SourceDBEngineType"
						},
						"SourceDBName"
					]
				},
				"AllocatedStorage": {
					"Ref": "SourceDBStorage"
				},
				"MasterUserPassword": {
					"Ref": "SourceDBPassword"
				},
				"DBInstanceClass": {
					"Ref": "SourceDBInstanceType"
				},
				"Engine": {
					"Ref": "SourceDBEngineType"
				},
				"EngineVersion": {
					"Fn::FindInMap": [
						"SourceDBEngineMap",
						{
							"Ref": "SourceDBEngineType"
						},
						"SnapDatabaseVersion"
					]
				},
				"LicenseModel": "license-included",
				"PubliclyAccessible": "false",
				"AvailabilityZone": {
					"Fn::GetAtt": [
						"Subnet1",
						"AvailabilityZone"
					]
				},
				"MultiAZ": "false",
				"DBSubnetGroupName": {
					"Ref": "DBSubnetGroup"
				},
				"VPCSecurityGroups": [{
					"Ref": "DBSecurityGroup"
				}],
				"DBSnapshotIdentifier": {
					"Fn::Join": [
						"",
						[
							"arn:aws:rds:",
							{
								"Ref": "AWS::Region"
							},
							":",
							{
								"Fn::FindInMap": [
									"SourceDBEngineMap",
									{
										"Ref": "SourceDBEngineType"
									},
									"SnapShotAccount"
								]
							},
							":snapshot:",
							{
								"Fn::FindInMap": [
									"SourceDBEngineMap",
									{
										"Ref": "SourceDBEngineType"
									},
									"SnapShotName"
								]
							}
						]
					]
				},
				"StorageType": "gp2",
				"Tags": [{
					"Key": "Application",
					"Value": {
						"Ref": "AWS::StackId"
					}
				}]
			},
			"DependsOn": [
				"DBSubnetGroup"
			]
		},
		"AuroraCluster": {
			"Type": "AWS::RDS::DBCluster",
			"Properties": {
				"DBClusterIdentifier": {
					"Fn::Join": [
						"",
						[{
								"Ref": "AWS::StackName"
							},
							"-TargetDB-Cluster"
						]
					]
				},
				"MasterUsername": {
					"Ref": "AuroraDBUsername"
				},
				"MasterUserPassword": {
					"Ref": "AuroraDBPassword"
				},
				"Engine": {
					"Ref": "AuroraEngineType"
				},
				"EngineVersion": {
					"Fn::FindInMap": [
						"AuroraMap",
						{
							"Ref": "AuroraEngineType"
						},
						"EngineVersion"
					]
				},
				"DBClusterParameterGroupName": {
					"Fn::FindInMap": [
						"AuroraMap",
						{
							"Ref": "AuroraEngineType"
						},
						"AuroraParameterGroupName"
					]
				},
				"DBSubnetGroupName": {
					"Ref": "DBSubnetGroup"
				},
				"VpcSecurityGroupIds": [{
					"Ref": "DBSecurityGroup"
				}],
				"Tags": [{
					"Key": "Application",
					"Value": {
						"Ref": "AWS::StackId"
					}
				}]
			},
			"DependsOn": [
				"DBSubnetGroup"
			]
		},
		"AuroraDB": {
			"Type": "AWS::RDS::DBInstance",
			"Properties": {
				"DBInstanceIdentifier": {
					"Fn::Join": [
						"",
						[{
								"Ref": "AWS::StackName"
							},
							"-TargetDB"
						]
					]
				},
				"DBSubnetGroupName": {
					"Ref": "DBSubnetGroup"
				},
				"Engine": {
					"Ref": "AuroraEngineType"
				},
				"MultiAZ": "false",
				"DBClusterIdentifier": {
					"Ref": "AuroraCluster"
				},
				"PubliclyAccessible": "false",
				"AvailabilityZone": {
					"Fn::GetAtt": [
						"Subnet1",
						"AvailabilityZone"
					]
				},
				"DBInstanceClass": {
					"Ref": "AuroraInstanceType"
				},
				"Tags": [{
					"Key": "Application",
					"Value": {
						"Ref": "AWS::StackId"
					}
				}]
			},
			"DependsOn": [
				"AuroraCluster"
			]
		},
		"DMSInstance": {
			"Type": "AWS::DMS::ReplicationInstance",
			"Properties": {
				"AllocatedStorage": {
					"Ref": "DMSInstanceStorage"
				},
				"AutoMinorVersionUpgrade": "false",
				"AvailabilityZone": {
					"Fn::GetAtt": [
						"Subnet1",
						"AvailabilityZone"
					]
				},
				"EngineVersion": {
					"Ref": "DMSInstanceVersion"
				},
				"MultiAZ": "false",
				"PubliclyAccessible": "false",
				"ReplicationInstanceClass": {
					"Ref": "DMSInstanceType"
				},
				"ReplicationInstanceIdentifier": {
					"Fn::Join": [
						"",
						[{
								"Ref": "AWS::StackName"
							},
							"-DMS-Instance"
						]
					]
				},
				"ReplicationSubnetGroupIdentifier": {
					"Ref": "DMSSubnetGroup"
				},
				"VpcSecurityGroupIds": [{
					"Ref": "DBSecurityGroup"
				}],
				"Tags": [{
					"Key": "Application",
					"Value": {
						"Ref": "AWS::StackId"
					}
				}]
			},
			"DependsOn": [
				"DMSSubnetGroup"
			]
		},
		"SCTHostInstance": {
			"Type": "AWS::EC2::Instance",
			"Properties": {
				"ImageId": {
					"Fn::FindInMap": [
						"SCTHostAMIId",
						{
							"Ref": "AWS::Region"
						},
						"amiid"
					]
				},
				"AvailabilityZone": {
					"Fn::GetAtt": [
						"Subnet1",
						"AvailabilityZone"
					]
				},
				"InstanceType": {
					"Ref": "SCTHostInstanceType"
				},
				"KeyName": {
					"Ref": "SCTHostKeyName"
				},
				"NetworkInterfaces": [{
					"AssociatePublicIpAddress": "true",
					"DeleteOnTermination": true,
					"DeviceIndex": "0",
					"GroupSet": [{
						"Ref": "SCTHostVPCSecurityGroup"
					}],
					"SubnetId": {
						"Ref": "Subnet1"
					}
				}],
				"Tags": [{
						"Key": "Application",
						"Value": {
							"Ref": "AWS::StackId"
						}
					},
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"",
								[{
										"Ref": "AWS::StackName"
									},
									"-SCT-Instance"
								]
							]
						}
					}
				]
			},
			"DependsOn": [
				"Subnet3",
				"AttachGateway"
			]
		}
	},
	"Outputs": {
		"StackName": {
			"Value": {
				"Ref": "AWS::StackName"
			}
		},
		"Regionname": {
			"Value": {
				"Ref": "AWS::Region"
			}
		},
		"SourceDBHostname": {
			"Description": "None Yet",
			"Value": {
				"Fn::GetAtt": [
					"SourceDBInstance",
					"Endpoint.Address"
				]
			}
		},
		"SourceDBPort": {
			"Description": "None Yet",
			"Value": {
				"Fn::GetAtt": [
					"SourceDBInstance",
					"Endpoint.Port"
				]
			}
		},
		"SourceDBUser": {
			"Description": "None Yet",
			"Value": {
				"Ref": "SourceDBUsername"
			}
		},
		"SourceDBUserPassword": {
			"Description": "None Yet",
			"Value": {
				"Ref": "SourceDBPassword"
			}
		},
		"TargetDBHostname": {
			"Description": "None Yet",
			"Value": {
				"Fn::GetAtt": [
					"AuroraCluster",
					"Endpoint.Address"
				]
			}
		},
		"TargetDBPort": {
			"Description": "None Yet",
			"Value": {
				"Fn::GetAtt": [
					"AuroraCluster",
					"Endpoint.Port"
				]
			}
		},
		"TargetDBUser": {
			"Description": "None Yet",
			"Value": {
				"Ref": "AuroraDBUsername"
			}
		},
		"TargetDBUserPassword": {
			"Description": "None Yet",
			"Value": {
				"Ref": "AuroraDBPassword"
			}
		},
		"SCTHostName": {
			"Description": "None Yet",
			"Value": {
				"Fn::Join": [
					"",
					[{
							"Ref": "AWS::StackName"
						},
						"-SCT-Instance"
					]
				]
			}
		},
		"SCTHostPublicDNS": {
			"Description": "None Yet",
			"Value": {
				"Fn::GetAtt": [
					"SCTHostInstance",
					"PublicDnsName"
				]
			}
		},
		"SCTHostUsername": {
			"Description": "None Yet",
			"Value": "Administrator"
		},
		"DMSInstanceName": {
			"Description": "None Yet",
			"Value": {
				"Fn::Join": [
					"",
					[{
							"Ref": "AWS::StackName"
						},
						"-DMS-Instance"
					]
				]
			}
		}
	}
}
